import openai
import os
import random  # Add this line to import the random module
from rich.console import Console
from dotenv import load_dotenv
from elevenlabs import set_api_key, generate, play, save
from pydub import AudioSegment
from pathlib import Path
from gtts import gTTS

try:
    load_dotenv()

    openai.api_key = os.getenv("OPENAI_API_KEY")
    set_api_key(os.getenv("ELEVENLABS_API_KEY"))
except: 
    print('API config failed; might use default key')

# Define BJJ preferences
bjj_preferences = {
    "preferes_customized_training": True,
    "focus_on_grappling": True,
    "preferes_stronger_takedowns": True,
    "focus_on_ground_control": True,
    "preferes_submission_practice": True,
    "preferes_cardio_endurance": True,
    "focus_on_escapes": True,
    "preferes_drills_over_sparring": False,
    "preferes_daily_training_sessions": True,
    "focus_on_leg_locks": True,
    "preferes_mental_toughness_training": True,
    "preferes_variety_in_techniques": True,
    "focus_on_transitioning_between_positions": True,
    "preferes_sparing_with_higher_belts": True,
    "preferes_video_analysis": True,
    "focus_on_self-defense_techniques": True,
    "preferes_strength_training": True,
    "preferes_light_rolling_sessions": False,
    "focus_on_guard_passing": True,
    "preferes_early_morning_training": True,
    # Add other BJJ-specific preferences as needed
}

def generate_bjj_training_text(user_name, goals, language, preferences=bjj_preferences):
    """Generates personalized BJJ training suggestions.

    Parameters
    ----------
    user_name : str
        The user's name.
    goals : list of str
        Goals for the desired BJJ training.
    language : str
        Language for the training suggestions.
    preferences : dict
        User's training preferences.

    Returns
    -------
    str
        Training text generated by OpenAI model.
    """
    print(f"Generating BJJ training suggestions for {user_name} with goals {goals} in {language} considering preferences: {preferences}")
    prompt = f"Create personalized BJJ training suggestions for {user_name} with goals {goals} in {language} language considering preferences: {preferences} in less than 1000 characters"
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=700,
        temperature=0.7
    )
    training_text = response['choices'][0]['text']
    return training_text

def generate_bjj_video_suggestions(user_name, goals, language):
    """Generates video suggestions for BJJ training.

    Parameters
    ----------
    user_name : str
        The user's name.
    goals : list of str
        Goals for the desired BJJ training.
    language : str
        Language for the video suggestions.

    Returns
    -------
    str
        Video suggestions generated based on BJJ goals.
    """
    video_types = ["Tutorial", "Drill Session", "Match Analysis"]

    # Generate a random type of video
    selected_video_type = random.choice(video_types)

    # Generate more specific suggestions
    video_suggestions = f"Here's a {selected_video_type.lower()} video for {user_name} to improve {', '.join(goals)} in {language}."
    return video_suggestions
    
    # Generate a random type of video
    selected_video_type = random.choice(video_types)
    
    # Generate more specific suggestions
    video_suggestions = f"Here's a {selected_video_type.lower()} video for {user_name} to improve {', '.join(goals)} in {language}."
    return video_suggestions

# Example usage:
user_name = "John"
goals = ["Improve guard passing", "Enhance submission defense"]
language = "en"

# Generate custom training text
training_text = generate_bjj_training_text(user_name, goals, language)
print(training_text)

# Generate video suggestions
video_suggestions = generate_bjj_video_suggestions(user_name, goals, language)
print(video_suggestions)

# while checking only --------------!------------------
# Example usage for BJJ app
# user_name = "John"
# goals = ["Improve guard passing", "Enhance submission defense"]
# language = "en"

# # Generate personalized BJJ training suggestions
# training_text = generate_bjj_training_text(user_name, goals, language)
# print(training_text)

# # Generate suggestions of videos for BJJ training
# video_suggestions = generate_bjj_video_suggestions(user_name, goals, language)
# print(video_suggestions)
